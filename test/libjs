const Jest = require('jest');
const mdLinks = require('../lib/index.js');
/* OBTENER LINKS */
const getLinksFileOrDirectory = require('../lib/get-links.js');
// const converterPathToAbsolute = require('../lib/converter-path.js');
const identifyFileOrDirectory = require('../lib/identify-file-directory.js');
const myReadFile = require('../lib/read-file.js');
const myReadDir = require('../lib/read-dir.js');
const getFilesMd = require('../lib/get-files-md.js');
const getFilesDirectory = require('../lib/get-files-directory.js');
const getFileContent = require('../lib/get-file-content.js');
const { extractAnchorLabels } = require('../lib/extract-anchor.js');
const convertLinksToObjects = require('../lib/convert-links-objects');
/* LINK OK / FAILED */
// const getValidateLinks = require('../lib/get-validate-links.js');
const linkValidation = require('../lib/link-validation.js');
const requestToLink = require('../lib/request-link.js');              
/* TOTALES, ÚNICOS */
// const validateAndStateLinks = require('../lib/validate-and-state.js');
const {
  getStatusLinks,
  getLinksUniques,
  getLinksOfObjects,
} = require('../lib/get-status-links.js');

const {
  testLinks,
  testValidate,
  testFile,
  testAnchor,
  testFilesDirectory,
  testReadFile,
  testFilesMd,
  testFileValidate,
  testGetLinksOfObjects,
  testLiksUniques,
  tesContenFile
} = require('./fixtures.js')

describe('mdLinks', () => {
  test('debería retornar un array de objetos con la popiedad href, text y path', () => {
    mdLinks(__dirname, { state: false, validate: false })
      // eslint-disable-next-line no-undef
      .then(data => expect(data).toEqual(testLinks))
      .catch(err => console.log(err));
  });
  test('debería retornar : total: 46 | unique : 39', () => {
    mdLinks(__dirname, { state: true, validate: false })
      // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual(' total: 10 | unique : 9 '))
      .catch(err => console.log(err));
  });
  test('debería retornar un array de objetos con la popiedad href, text ,path y status', () => {
    mdLinks(__dirname, { state: false, validate: true })
      // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual(testValidate))
      .catch(err => console.log(err));
  });
  test('debería retornar: total: 10 | unique : 9  | broken: 2', () => {
    mdLinks(__dirname, { state: true, validate: true })
      // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual(' total: 10 | unique : 9  | broken: 2'))
      .catch(err => console.log(err));
  });
});


describe('getLinksFileOrDirectory', () => {
  test('debería retornar un array de objetos con la popiedad href, text y path para: test/', () => {
    getLinksFileOrDirectory('test/')
      // eslint-disable-next-line no-undef
      .then(data => expect(data).toEqual(testLinks))
      .catch(err => console.log(err));
  });
  test('debería retornar array de objetos con la popiedad href, text y path para: test/README.md', () => {
    getLinksFileOrDirectory('test/files-test/README.md')
      // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual(testFile))
      .catch(err => console.log(err));
  });
});


describe('identifyFileOrDirectory', () => {
  test('debería retornar file test/files-test/README.md', () => {
    identifyFileOrDirectory('test/files-test/README.md')
      // eslint-disable-next-line no-undef
      .then(data => expect(data).toEqual('file'))
      .catch(err => console.log(err));
  });
  test('debería retornar directory para: test/', () => {
    identifyFileOrDirectory('test/')
      // eslint-disable-next-line no-undef
      .then(data => expect(data).toEqual('directory'))
      .catch(err => console.log(err));
  });
});


describe('extractAnchorLabels', () => {
  test('debería retornar un array de <a></a> para el contenido de test/files-test/README.md', () => {
    // eslint-disable-next-line no-undef
    expect.assertions(3);
    return getFileContent('test/files-test/README.md')
      // eslint-disable-next-line no-undef
      .then(res => expect(extractAnchorLabels(res)).toEqual(testAnchor))
      .catch(err => console.log(err));
  });
  test('debería retornar un array vacío para un texto que no contiene links ', () => {
    // eslint-disable-next-line no-undef
    // console.log(extractAnchorLabels(`## Decisiones de diseño.
    //   Los colores usados en el diseño de la interfaz(parte visible) de la web, se basaron en la tendencia `))
   return expect(extractAnchorLabels(`## Decisiones de diseño.
      Los colores usados en el diseño de la interfaz(parte visible) de la web, se basaron en la tendencia `)).toEqual([]);
  });
});


describe('getFileContent', () => {
  test('debería retornar un string para: test/files-test/README.md', () => {
    getFileContent('test/files-test/README.md')
      // eslint-disable-next-line no-undef
      .then(data => expect(typeof data).toBe('string'))
      .catch(err => console.log(err));
  });
  test('debería retornar  ERROR para tests/', async() => {
      // eslint-disable-next-line no-undef
    return  await expect(typeof getFileContent('')).toMatch('object'); 
  });
});


describe('getFilesDirectory', () => {
  test('debería retornar  un array de archivos existentes en la carpeta test/', () => {
    return getFilesDirectory('C:/Users/YulissaLiliana/Documents/lim20181-Track-FE-markdown-list/test/')
    // eslint-disable-next-line no-undef
      // .then(res => console.log(res))
      .then(res => expect(res).toEqual(testFilesDirectory))
      // .catch(err => console.log(err));
  });

  test('debería retornar  ERROR para tests/', () => {
   return  getFilesDirectory('test/files-test/README.md')
    // eslint-disable-next-line no-undef
    // .then(()=> console.log(res))
// .catch((err)=> console.log(err))
      .catch(err => expect(typeof err).toEqual('object'));
  });
});


describe('myReadFile', () => {
  test('debería retornar un array de objetos con las propiedades href, text, path para la ruta de un archivo determinado', () => {
    return  myReadFile('test/files-test/README.1.md')
    // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual(testReadFile))
      .catch(err => console.log(err));
  });
  test('debería retornar un objeto de error para una ruta de archivo no existente', () => {
    return myReadFile('test/files-test/README.0.md')
    // eslint-disable-next-line no-undef
      .catch(err => expect(typeof err).toEqual('object'));
  });
});

const files = ['C:\\Users\\YulissaLiliana\\Documents\\lim20181-Track-FE-markdown-list\\test\\files-test\\README.1.md',
  'C:\\Users\\YulissaLiliana\\Documents\\lim20181-Track-FE-markdown-list\\test\\files-test\\README.2.md',
  'C:\\Users\\YulissaLiliana\\Documents\\lim20181-Track-FE-markdown-list\\test\\files-test\\README.3.md',
  'C:\\Users\\YulissaLiliana\\Documents\\lim20181-Track-FE-markdown-list\\test\\files-test\\README.md'];
describe('myReadDir', () => {
  test('debería retornar  un array con objetos de links existentes en la carpeta test/', () => {
    return  myReadDir(files)
    // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual(testLinks))
      .catch(err => console.log(err));
  });
});


describe('getFilesMd', () => {
  test('debería retornar  un array de archivos con extensión md de un array de archivos de la carpeta test/', () => {
    // eslint-disable-next-line no-undef
    return  expect(getFilesMd(testFilesDirectory)).toEqual(testFilesMd);
  });
});


describe('getStatusLinks', () => {
  test('debería retornar => total: 10 | unique : 9     para test/', () => {
    return  getStatusLinks('test/')
    // eslint-disable-next-line no-undef
      .then(resp => expect(resp).toEqual(' total: 10 | unique : 9 '))
      .catch(err => console.log(err));
  });
  test('debería retornar => total: 10 | unique : 9     para test/', () => {
    return  getStatusLinks('tests/')
    // eslint-disable-next-line no-undef
      // .then(resp => expect(resp).toEqual(' total: 10 | unique : 9 '))
      .catch(err => expect(typeof err).toEqual('object'));
  });
});


describe('linkValidation', () => {
  test('debería retornar un array de objetos con la propiedad state agregada', () => {
    return  Promise.all(linkValidation(testLinks))
    // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual(testValidate))
      .catch(err => console.log(err));
  });
});


describe('requestToLink', () => {
  test('debería retornar Not Found 404 para  https://es.wikipedia.org/wiki/Markdow', () => {
    return  requestToLink('https://es.wikipedia.org/wiki/Markdow')
    // eslint-disable-next-line no-undef
      .then(res => expect(res).toEqual('Not Found 404'))
      .catch((err) => { console.log(err) });
  });
});


describe('convertLinksToObjects', () => {
  test('debería retornar  un array de objetos para: un array de etiquetas <a></a> y la ruta de los links', () => {
    // eslint-disable-next-line no-undef
  return  expect(convertLinksToObjects(testAnchor, 'C:/Users/YulissaLiliana/Documents/lim20181-Track-FE-markdown-list/test/files-test/README.md')).toEqual(testFileValidate);
  });
});


describe('getLinksOfObjects', () => {
  test('debería retornar un array de links [link, link] de un array de objetos {href, text, path}', () => {
    return  getLinksFileOrDirectory('test/')
    // eslint-disable-next-line no-undef
      .then(data => expect(getLinksOfObjects(data)).toEqual(testGetLinksOfObjects))
  });
}); 


describe('getLinksUniques', () => {
  test('debería retornar un array con los links únicos para: un array de links', () => {
    // eslint-disable-next-line no-undef
    return  expect(getLinksUniques(testGetLinksOfObjects)).toEqual(testLiksUniques);
  });
});
